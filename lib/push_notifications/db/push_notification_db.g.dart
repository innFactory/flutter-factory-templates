// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'push_notification_db.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:PushNotification.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// PushNotification TABLE
class TablePushNotification extends SqfEntityTableBase {
  TablePushNotification() {
    // declare properties of EntityTable
    tableName = 'push_notification';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text, isNotNull: false),
      SqfEntityFieldBase('body', DbType.text, isNotNull: false),
      SqfEntityFieldBase('data', DbType.text, isNotNull: false),
      SqfEntityFieldBase('seen', DbType.bool, defaultValue: false, isNotNull: false),
      SqfEntityFieldBase('seenAt', DbType.datetime, isNotNull: false, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('receivedAt', DbType.datetime, isNotNull: false, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePushNotification();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class PushNotificationDb extends SqfEntityModelProvider {
  PushNotificationDb() {
    databaseName = pushNotificationDb.databaseName;
    password = pushNotificationDb.password;

    databaseTables = [
      TablePushNotification.getInstance,
    ];

    bundledDatabasePath = pushNotificationDb
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region PushNotification
class PushNotification {
  PushNotification({this.id, this.title, this.body, this.data, this.seen, this.seenAt, this.receivedAt, this.isDeleted}) {
    _setDefaultValues();
  }
  PushNotification.withFields(this.title, this.body, this.data, this.seen, this.seenAt, this.receivedAt, this.isDeleted) {
    _setDefaultValues();
  }
  PushNotification.withId(this.id, this.title, this.body, this.data, this.seen, this.seenAt, this.receivedAt, this.isDeleted) {
    _setDefaultValues();
  }
  PushNotification.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['title'] != null) {
      title = o['title'] as String;
    }
    if (o['body'] != null) {
      body = o['body'] as String;
    }
    if (o['data'] != null) {
      data = o['data'] as String;
    }
    if (o['seen'] != null) {
      seen = o['seen'] == 1 || o['seen'] == true;
    }
    if (o['seenAt'] != null) {
      seenAt = int.tryParse(o['seenAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(int.tryParse(o['seenAt'].toString()))
          : DateTime.tryParse(o['seenAt'].toString());
    }
    if (o['receivedAt'] != null) {
      receivedAt = int.tryParse(o['receivedAt'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(int.tryParse(o['receivedAt'].toString()))
          : DateTime.tryParse(o['receivedAt'].toString());
    }
    isDeleted = o['isDeleted'] != null ? o['isDeleted'] == 1 || o['isDeleted'] == true : null;
  }
  // FIELDS (PushNotification)
  int id;
  String title;
  String body;
  String data;
  bool seen;
  DateTime seenAt;
  DateTime receivedAt;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (PushNotification)

  static const bool _softDeleteActivated = true;
  PushNotificationManager __mnPushNotification;

  PushNotificationManager get _mnPushNotification {
    return __mnPushNotification = __mnPushNotification ?? PushNotificationManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (body != null) {
      map['body'] = body;
    }

    if (data != null) {
      map['data'] = data;
    }

    if (seen != null) {
      map['seen'] = forQuery ? (seen ? 1 : 0) : seen;
    }

    if (seenAt != null) {
      map['seenAt'] = forJson ? seenAt.toString() : forQuery ? seenAt.millisecondsSinceEpoch : seenAt;
    }

    if (receivedAt != null) {
      map['receivedAt'] = forJson ? receivedAt.toString() : forQuery ? receivedAt.millisecondsSinceEpoch : receivedAt;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren([bool forQuery = false, bool forJson = false, bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (body != null) {
      map['body'] = body;
    }

    if (data != null) {
      map['data'] = data;
    }

    if (seen != null) {
      map['seen'] = forQuery ? (seen ? 1 : 0) : seen;
    }

    if (seenAt != null) {
      map['seenAt'] = forJson ? seenAt.toString() : forQuery ? seenAt.millisecondsSinceEpoch : seenAt;
    }

    if (receivedAt != null) {
      map['receivedAt'] = forJson ? receivedAt.toString() : forQuery ? receivedAt.millisecondsSinceEpoch : receivedAt;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      title,
      body,
      data,
      seen,
      seenAt != null ? seenAt.millisecondsSinceEpoch : null,
      receivedAt != null ? receivedAt.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      title,
      body,
      data,
      seen,
      seenAt != null ? seenAt.millisecondsSinceEpoch : null,
      receivedAt != null ? receivedAt.millisecondsSinceEpoch : null,
      isDeleted
    ];
  }

  static Future<List<PushNotification>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR PushNotification.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<PushNotification>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <PushNotification>[];
    try {
      objList = list.map((pushnotification) => PushNotification.fromMap(pushnotification as Map<String, dynamic>)).toList();
    } catch (e) {
      print('SQFENTITY ERROR PushNotification.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<PushNotification>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields, bool loadParents = false, List<String> loadedFields, bool setDefaultValues = true}) async {
    final List<PushNotification> objList = <PushNotification>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = PushNotification.fromMap(map as Map<String, dynamic>, setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns PushNotification by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be 'true')
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns PushNotification if exist, otherwise returns null
  Future<PushNotification> getById(int id,
      {bool preload = false, List<String> preloadFields, bool loadParents = false, List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    PushNotification obj;
    final data = await _mnPushNotification.getById([id]);
    if (data.length != 0) {
      obj = PushNotification.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (PushNotification) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnPushNotification.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPushNotification.update(this);
    }

    return id;
  }

  /// saveAs PushNotification. Returns a new Primary Key value of PushNotification

  /// <returns>Returns a new Primary Key value of PushNotification
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<PushNotification> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<dynamic>> saveAll(List<PushNotification> pushnotifications) async {
    // final results = _mnPushNotification.saveAll('INSERT OR REPLACE INTO push_notification (id,title, body, data, seen, seenAt, receivedAt,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',pushnotifications);
    // return results; removed in sqfentity_gen 1.3.0+6
    PushNotificationDb().batchStart();
    for (final obj in pushnotifications) {
      await obj.save();
    }
    return PushNotificationDb().batchCommit();
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnPushNotification.rawInsert(
              'INSERT OR REPLACE INTO push_notification (id,title, body, data, seen, seenAt, receivedAt,isDeleted)  VALUES (?,?,?,?,?,?,?,?)', [
            id,
            title,
            body,
            data,
            seen,
            seenAt != null ? seenAt.millisecondsSinceEpoch : null,
            receivedAt != null ? receivedAt.millisecondsSinceEpoch : null,
            isDeleted
          ]) ==
          1) {
        saveResult = BoolResult(success: true, successMessage: 'PushNotification id=$id updated successfully');
      } else {
        saveResult = BoolResult(success: false, errorMessage: 'PushNotification id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(success: false, errorMessage: 'PushNotification Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<PushNotification>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<PushNotification> pushnotifications) async {
    final results = await _mnPushNotification.rawInsertAll(
        'INSERT OR REPLACE INTO push_notification (id,title, body, data, seen, seenAt, receivedAt,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        pushnotifications);
    return results;
  }

  /// Deletes PushNotification

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete PushNotification invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnPushNotification.delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPushNotification.updateBatch(QueryParams(whereString: 'id=?', whereArguments: [id]), {'isDeleted': 1});
    }
  }

  /// Recover PushNotification>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover PushNotification invoked (id=$id)');
    {
      return _mnPushNotification.updateBatch(QueryParams(whereString: 'id=?', whereArguments: [id]), {'isDeleted': 0});
    }
  }

  PushNotificationFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return PushNotificationFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  PushNotificationFilterBuilder distinct({List<String> columnsToSelect, bool getIsDeleted}) {
    return PushNotificationFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    seen = seen ?? false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       {
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion pushnotification

// region PushNotificationField
class PushNotificationField extends SearchCriteria {
  PushNotificationField(this.pushnotificationFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  PushNotificationFilterBuilder pushnotificationFB;

  PushNotificationField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  PushNotificationFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    pushnotificationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.EQuals, pushnotificationFB._addedBlocks)
        : setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.NotEQuals, pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    pushnotificationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.EQualsOrNull, pushnotificationFB._addedBlocks)
        : setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.NotEQualsOrNull, pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder isNull() {
    pushnotificationFB._addedBlocks = setCriteria(
        0, pushnotificationFB.parameters, param, SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot), pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      pushnotificationFB._addedBlocks = setCriteria('%${pValue.toString()}%', pushnotificationFB.parameters, param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot), pushnotificationFB._addedBlocks);
      _waitingNot = '';
      pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    }
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      pushnotificationFB._addedBlocks = setCriteria('${pValue.toString()}%', pushnotificationFB.parameters, param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot), pushnotificationFB._addedBlocks);
      _waitingNot = '';
      pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
      pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    }
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      pushnotificationFB._addedBlocks = setCriteria('%${pValue.toString()}', pushnotificationFB.parameters, param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot), pushnotificationFB._addedBlocks);
      _waitingNot = '';
      pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    }
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      pushnotificationFB._addedBlocks = setCriteria(pFirst, pushnotificationFB.parameters, param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot), pushnotificationFB._addedBlocks, pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        pushnotificationFB._addedBlocks =
            setCriteria(pFirst, pushnotificationFB.parameters, param, SqlSyntax.LessThan, pushnotificationFB._addedBlocks);
      } else {
        pushnotificationFB._addedBlocks =
            setCriteria(pFirst, pushnotificationFB.parameters, param, SqlSyntax.GreaterThanOrEquals, pushnotificationFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        pushnotificationFB._addedBlocks =
            setCriteria(pLast, pushnotificationFB.parameters, param, SqlSyntax.GreaterThan, pushnotificationFB._addedBlocks);
      } else {
        pushnotificationFB._addedBlocks =
            setCriteria(pLast, pushnotificationFB.parameters, param, SqlSyntax.LessThanOrEquals, pushnotificationFB._addedBlocks);
      }
    }
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    pushnotificationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.GreaterThan, pushnotificationFB._addedBlocks)
        : setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.LessThanOrEquals, pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    pushnotificationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.LessThan, pushnotificationFB._addedBlocks)
        : setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.GreaterThanOrEquals, pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    pushnotificationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.GreaterThanOrEquals, pushnotificationFB._addedBlocks)
        : setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.LessThan, pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    pushnotificationFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.LessThanOrEquals, pushnotificationFB._addedBlocks)
        : setCriteria(pValue, pushnotificationFB.parameters, param, SqlSyntax.GreaterThan, pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }

  PushNotificationFilterBuilder inValues(dynamic pValue) {
    pushnotificationFB._addedBlocks = setCriteria(
        pValue, pushnotificationFB.parameters, param, SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot), pushnotificationFB._addedBlocks);
    _waitingNot = '';
    pushnotificationFB._addedBlocks.needEndBlock[pushnotificationFB._blockIndex] = pushnotificationFB._addedBlocks.retVal;
    return pushnotificationFB;
  }
}
// endregion PushNotificationField

// region PushNotificationFilterBuilder
class PushNotificationFilterBuilder extends SearchCriteria {
  PushNotificationFilterBuilder(PushNotification obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  PushNotification _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  PushNotificationFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  PushNotificationFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  PushNotificationFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  PushNotificationFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(columnName: parameterValue == null ? null : '');
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  PushNotificationFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  PushNotificationFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  PushNotificationFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PushNotificationFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PushNotificationFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PushNotificationFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s != '') {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  PushNotificationField setField(PushNotificationField field, String colName, DbType dbtype) {
    return PushNotificationField(this)
      ..param = DbParameter(dbType: dbtype, columnName: colName, wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  PushNotificationField _id;
  PushNotificationField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  PushNotificationField _title;
  PushNotificationField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  PushNotificationField _body;
  PushNotificationField get body {
    return _body = setField(_body, 'body', DbType.text);
  }

  PushNotificationField _data;
  PushNotificationField get data {
    return _data = setField(_data, 'data', DbType.text);
  }

  PushNotificationField _seen;
  PushNotificationField get seen {
    return _seen = setField(_seen, 'seen', DbType.bool);
  }

  PushNotificationField _seenAt;
  PushNotificationField get seenAt {
    return _seenAt = setField(_seenAt, 'seenAt', DbType.datetime);
  }

  PushNotificationField _receivedAt;
  PushNotificationField get receivedAt {
    return _receivedAt = setField(_receivedAt, 'receivedAt', DbType.datetime);
  }

  PushNotificationField _isDeleted;
  PushNotificationField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value.toString().replaceAll('[', '').replaceAll(']', '').toString();
          whereString += param.whereString.replaceAll('{field}', param.columnName).replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString += param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 = param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null ? null : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null ? null : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (PushNotification._softDeleteActivated) {
      if (whereString != '') {
        whereString = '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<PushNotification> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (PushNotification._softDeleteActivated && !hardDelete) {
      r = await _obj._mnPushNotification.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnPushNotification.delete(qparams);
    }
    return r;
  }

  /// Recover List<PushNotification> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover PushNotification bulk invoked');
    return _obj._mnPushNotification.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from push_notification ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnPushNotification.updateBatch(qparams, values);
  }

  /// This method always returns PushNotification Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be 'true')
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<PushNotification>
  Future<PushNotification> toSingle({bool preload = false, List<String> preloadFields, bool loadParents = false, List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnPushNotification.toList(qparams);
    final data = await objFuture;
    PushNotification obj;
    if (data.isNotEmpty) {
      obj = PushNotification.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) pushnotificationCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final pushnotificationsFuture = await _obj._mnPushNotification.toList(qparams);
    final int count = pushnotificationsFuture[0]['CNT'] as int;
    if (pushnotificationCount != null) {
      pushnotificationCount(count);
    }
    return count;
  }

  /// This method returns List<PushNotification>.
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be 'true')
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<PushNotification>
  Future<List<PushNotification>> toList(
      {bool preload = false, List<String> preloadFields, bool loadParents = false, List<String> loadedFields}) async {
    final data = await toMapList();
    final List<PushNotification> pushnotificationsData = await PushNotification.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return pushnotificationsData;
  }

  /// This method returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnPushNotification.toList(qparams);
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnPushNotification.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnPushNotification.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await PushNotification.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString([VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnPushNotification.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PushNotificationFilterBuilder

// region PushNotificationFields
class PushNotificationFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle = _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fBody;
  static TableField get body {
    return _fBody = _fBody ?? SqlSyntax.setField(_fBody, 'body', DbType.text);
  }

  static TableField _fData;
  static TableField get data {
    return _fData = _fData ?? SqlSyntax.setField(_fData, 'data', DbType.text);
  }

  static TableField _fSeen;
  static TableField get seen {
    return _fSeen = _fSeen ?? SqlSyntax.setField(_fSeen, 'seen', DbType.bool);
  }

  static TableField _fSeenAt;
  static TableField get seenAt {
    return _fSeenAt = _fSeenAt ?? SqlSyntax.setField(_fSeenAt, 'seenAt', DbType.datetime);
  }

  static TableField _fReceivedAt;
  static TableField get receivedAt {
    return _fReceivedAt = _fReceivedAt ?? SqlSyntax.setField(_fReceivedAt, 'receivedAt', DbType.datetime);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ?? SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PushNotificationFields

//region PushNotificationManager
class PushNotificationManager extends SqfEntityProvider {
  PushNotificationManager() : super(PushNotificationDb(), tableName: _tableName, primaryKeyList: _primaryKeyList, whereStr: _whereStr);
  static final String _tableName = 'push_notification';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion PushNotificationManager
class PushNotificationDbSequenceManager extends SqfEntityProvider {
  PushNotificationDbSequenceManager() : super(PushNotificationDb());
}
// END OF ENTITIES
